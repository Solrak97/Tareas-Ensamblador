     1                                 %line 1+1 logica.asm
     2                                 
     3                                 %line 18+1 logica.asm
     4                                 
     5                                 
     6                                 %line 33+1 logica.asm
     7                                 
     8                                 
     9                                 
    10                                 %line 41+1 logica.asm
    11                                 
    12                                 
    13                                 
    14                                 [global instr]
    15                                 instr:
    16                                 instr_prelude:
    17                                 
    18 00000000 4157                   push r15
    19 00000002 4156                   push r14
    20 00000004 4155                   push r13
    21 00000006 4154                   push r12
    22 00000008 4153                   push r11
    23 0000000A 4152                   push r10
    24 0000000C 50                     push rax
    25                                 
    26                                 
    27                                 
    28 0000000D 4C8B7C2440             mov r15, [rsp + (8*8)]
    29 00000012 4C8B742448             mov r14, [rsp + (9*8)]
    30 00000017 4C8B6C2450             mov r13, [rsp + (10*8)]
    31                                 instr_funct:
    32 0000001C 80F901                  cmp cl, 1
    33                                 %line 62+0 logica.asm
    34 0000001F 7408                    je ..@1.is_reg
    35 00000021 80F902                  cmp cl, 2
    36 00000024 740D                    je ..@1.is_mem
    37 00000026 4D89C3                  mov r11, r8
    38 00000029 EB0F                    jmp ..@1.end_params
    39                                 ..@1.is_reg:
    40 0000002B 4B8B44C500              mov rax, qword[r13 + (r8 * 8)]
    41 00000030 4989C3                  mov r11, rax
    42 00000033 EB05                    jmp ..@1.end_params
    43                                 ..@1.is_mem:
    44 00000035 4B8B0406                mov rax, qword[r14 + r8]
    45 00000039 4989C3                  mov r11, rax
    46                                 ..@1.end_params:
    47                                 %line 63+1 logica.asm
    48 0000003C 4180F901                cmp r9b, 1
    49                                 %line 63+0 logica.asm
    50 00000040 7409                    je ..@2.is_reg
    51 00000042 4180F902                cmp r9b, 2
    52 00000046 740D                    je ..@2.is_mem
    53 00000048 4D89FC                  mov r12, r15
    54 0000004B EB0F                    jmp ..@2.end_params
    55                                 ..@2.is_reg:
    56 0000004D 4B8B44FD00              mov rax, qword[r13 + (r15 * 8)]
    57 00000052 4989C4                  mov r12, rax
    58 00000055 EB05                    jmp ..@2.end_params
    59                                 ..@2.is_mem:
    60 00000057 4B8B043E                mov rax, qword[r14 + r15]
    61 0000005B 4989C4                  mov r12, rax
    62                                 ..@2.end_params:
    63                                 %line 64+1 logica.asm
    64 0000005E 4080FE01                cmp sil, 1
    65                                 %line 64+0 logica.asm
    66 00000062 7406                    je ..@3.is_reg
    67 00000064 4C01F2                  add rdx, r14
    68 00000067 4889D0                  mov rax, rdx
    69 0000006A EB08                    jmp ..@3.end_params
    70                                 ..@3.is_reg:
    71 0000006C 48C1E203                shl rdx, 3
    72 00000070 4C01EA                  add rdx, r13
    73 00000073 4889D0                  mov rax, rdx
    74                                 ..@3.end_params:
    75 00000076 4989C2                  mov r10, rax
    76                                 %line 65+1 logica.asm
    77                                 
    78                                 
    79 00000079 4080FF04               cmp dil, 4
    80 0000007D 740E                   je add_oper
    81 0000007F 4C89D7                  mov rdi, r10
    82                                 %line 69+0 logica.asm
    83 00000082 4C89DE                  mov rsi, r11
    84 00000085 4C89E2                  mov rdx, r12
    85                                 %line 70+1 logica.asm
    86 00000088 E820000000             call sub_instruction
    87 0000008D EB0C                   jmp instr_epilogue
    88                                 add_oper:
    89 0000008F 4C89D7                  mov rdi, r10
    90                                 %line 73+0 logica.asm
    91 00000092 4C89DE                  mov rsi, r11
    92 00000095 4C89E2                  mov rdx, r12
    93                                 %line 74+1 logica.asm
    94 00000098 E809000000             call add_instruction
    95                                 instr_epilogue:
    96 0000009D 58                     pop rax
    97 0000009E 415A                   pop r10
    98 000000A0 415B                   pop r11
    99 000000A2 415C                   pop r12
   100 000000A4 415D                   pop r13
   101 000000A6 415E                   pop r14
   102 000000A8 415F                   pop r15
   103 000000AA C3                     ret
   104                                 
   105                                 
   106                                 
   107                                 add_instruction:
   108 000000AB 4801D6                  add rsi, rdx
   109 000000AE 488937                  mov qword[rdi], rsi
   110 000000B1 C3                      ret
   111                                 
   112                                 
   113                                 
   114                                 sub_instruction:
   115 000000B2 48F7D2                  not rdx
   116 000000B5 4883C201                add rdx, 1
   117 000000B9 E8E8FFFFFF              call add_instruction
   118 000000BE C3                      ret
